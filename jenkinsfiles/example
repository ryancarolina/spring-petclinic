#!/bin/env groovy

import groovy.json.JsonOutput

def slackNotificationChannel = 'build-status'

def notifySlack(text, channel, attachments) {
    def slackURL = 'https://hooks.slack.com/services/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'
    def jenkinsIcon = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'

    def payload = JsonOutput.toJson([text: text,
                                     channel: channel,
                                     username: "Jenkins",
                                     icon_url: jenkinsIcon,
                                     attachments: attachments
    ])

    sh "curl -X POST --data-urlencode \'payload=${payload}\' ${slackURL}"
}

pipeline {
  agent none

  environment {
    IMAGE = "liatrio/petclinic-tomcat"
  }

  stages {
      stage('Lint') {
          agent any
          steps {
              //If Lint check passes
              echo 'Lint Complete!'

              //Else, push msg to slack to inform team of failure
          }
      }
    stage('Build') {
      agent any
      steps {
        sh 'mvn clean install'
      }
    }
    stage('Package') {
      agent any
      steps {
        script {
          if ( env.BRANCH_NAME == 'master' ) {
            pom = readMavenPom file: 'pom.xml'
            TAG = pom.version
          } else {
            TAG = env.BRANCH_NAME
          }
          sh "docker build -t ${env.IMAGE}:${TAG} ."
        }
      }
    }
    stage('Deploy to Dev') {
      agent any
      steps {
        sh 'docker rm -f petclinic-tomcat-temp || true'
        sh "docker run -d -p 9966:8080 --name petclinic-tomcat-temp ${env.IMAGE}:${TAG}"
      }
    }
    stage('Smoke Test Dev') {
      agent any
      steps {
        sh 'sleep 4'

        //Push test results to slack
          notifySlack("Smoke Tests Passed!", slackNotificationChannel, [])
      }
    }
    stage('Performance, Load, and Security Test Dev') {
      agent any
      steps {
        sh 'sleep 4'
        sh "mvn gatling:test -Dgatling.simulationClass=computerdatabase.RecordedSimulationPetClinic"

        //Push test results to slack
          notifySlack("Performance Tests Passed!", slackNotificationChannel, [])
      }
    }
    stage('Functional Test Dev') {
      agent any
      steps {
        sh 'sleep 4'
        sh "mvn test -Dtest=KaijuTestClassExample"

        //Push test results to slack
          notifySlack("Functional Tests Passed!", slackNotificationChannel, [])
      }
    }
    stage('Deploy to Int') {
      agent any
      steps {
        echo 'Deployment to Integration Complete!'
      }
    }
    stage('Integration Test') {
      agent any
      steps {
        echo 'Integration Tests Complete!'

        //Push test results to slack
      }
    }
    stage('Deploy to PreProd') {
      agent any
      steps {
        echo 'Deployment to Pre-Production Complete!'
      }
    }
  }
}
